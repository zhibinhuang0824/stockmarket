head(parse_date( paste0("01/",data$Date), format = "%d/%m/%Y"))
data <- read_csv("./data/01-raw_data/icf_stock_market_confidence_index_table.csv", skip = 1)
colnames(data) <- c("Date",
"Institutional",
"Standard Error",
"Individual",
"Standard Error"
)
data <- data[,c(1,2,4)]
data$Date <- parse_date( paste0("01/",data$Date), format = "%d/%m/%Y")
head(data)
data$Individual <- as.numeric(data$Individual)
head(data)
summary(data)
tail(data)
data <- data %>% drop_na()
head(data)
write.csv("./data/01-raw_data/analysis_data.csv")
write.csv(data, file = "./data/01-raw_data/analysis_data.csv")
head(data)
library(tidyr)
analysis_data <- read_csv("./data/02-analysis_data/analysis_data.csv")
head(analysis_data )
write.csv(data, file = "./data/02-analysis_data/analysis_data.csv")
analysis_data <- read_csv("./data/02-analysis_data/analysis_data.csv")
head(analysis_data)
analysis_data <- read_csv("./data/02-analysis_data/analysis_data.csv")[,-1]
head(analysis_data)
analysis_data <- analysis_data  %>% pivot_longer(-Date, values_to = "Confidence","Type")
analysis_data <- read_csv("./data/02-analysis_data/analysis_data.csv")[,-1]
analysis_data <- analysis_data  %>% pivot_longer(-Date, values_to = "Confidence", names_to =  "Type")
head(analysis_data)
analysis_data <- read_csv("./data/02-analysis_data/analysis_data.csv")[,-1]
analysis_data <- analysis_data  %>% pivot_longer(-Date, values_to = "Confidence", names_to =  "Type")
analysis_data |>
ggplot(aes(x = Date, y = Confidence, color = Type )) +
geom_point(alpha = 0.8, size = 3) +
geom_line() +
theme_minimal() +
labs(x = "Date",
y = "Confidence Index of Stock Market")
data <- read_csv("./data/01-raw_data/icf_stock_market_confidence_index_table.csv", skip = 1)
colnames(data) <- c("Date",
"Institutional",
"Standard Error",
"Individual",
"Standard Error"
)
data <- data[,c(1,2,4)]
data$Date <- parse_date( paste0("01/",data$Date), format = "%d/%m/%Y")
data$Individual <- as.numeric(data$Individual)
data <- data %>% drop_na()
data <- data %>% filter(Date >= as.Date("2000-01-01"))
write.csv(data, file = "./data/02-analysis_data/analysis_data.csv")
analysis_data <- read_csv("./data/02-analysis_data/analysis_data.csv")[,-1]
analysis_data <- analysis_data  %>% pivot_longer(-Date, values_to = "Confidence", names_to =  "Type")
analysis_data |>
ggplot(aes(x = Date, y = Confidence, color = Type )) +
geom_point(alpha = 0.8, size = 3) +
geom_line() +
theme_minimal() +
labs(x = "Date",
y = "Confidence Index of Stock Market")
library(tidyverse)
library(rstanarm)
#### Read data ####
analysis_data <- read_csv("data/analysis_data/analysis_data.csv")
analysis_data <- read_csv("./data/02-analysis_data/analysis_data.csv")
head(analysis_data)
analysis_data <- analysis_data  %>% pivot_longer(-Date, values_to = "Confidence", names_to =  "Type")
head(analysis_data)
analysis_data <- read_csv("./data/02-analysis_data/analysis_data.csv")[,-1]
analysis_data <- analysis_data  %>% pivot_longer(-Date, values_to = "Confidence", names_to =  "Type")
head(analysis_data)
as.numeric(analysis_data$Date)
date_decimal (analysis_data$Date)
?date_decimal
?decimal_date
decimal_date(analysis_data$Date)
head(analysis_data)
analysis_data <- analysis_data  %>% pivot_longer(-Date, values_to = "Confidence", names_to =  "Type")
analysis_data <- read_csv("./data/02-analysis_data/analysis_data.csv")[,-1]
analysis_data <- analysis_data  %>% pivot_longer(-Date, values_to = "Confidence", names_to =  "Type")
analysis_data$time <-  decimal_date(analysis_data$Date)
head(analysis_data)
first_model <-
stan_glm(
formula = Confidence ~ time +  Type ,
data = analysis_data,
family = gaussian(),
prior = normal(location = 0, scale = 2.5, autoscale = TRUE),
prior_intercept = normal(location = 0, scale = 2.5, autoscale = TRUE),
prior_aux = exponential(rate = 1, autoscale = TRUE),
seed = 853
)
summary(first_model)
first_model
### Model data ####
first_model <-
stan_glm(
formula = Confidence ~ time +  Type ,
data = analysis_data,
family = gaussian(),
prior = normal(location = 0, scale = 1, autoscale = TRUE),
prior_intercept = normal(location = 0, scale = 1, autoscale = TRUE),
prior_aux = exponential(rate = 1, autoscale = TRUE),
seed = 853
)
#### Save model ####
saveRDS(
first_model,
file = "models/first_model.rds"
)
#### Preamble ####
# Purpose: Models... [...UPDATE THIS...]
# Author: Rohan Alexander [...UPDATE THIS...]
# Date: 11 February 2023 [...UPDATE THIS...]
# Contact: rohan.alexander@utoronto.ca [...UPDATE THIS...]
# License: MIT
# Pre-requisites: [...UPDATE THIS...]
# Any other information needed? [...UPDATE THIS...]
#### Workspace setup ####
library(tidyverse)
library(rstanarm)
library(tidyr)
#### Read data ####
analysis_data <- read_csv("./data/02-analysis_data/analysis_data.csv")[,-1]
analysis_data <- analysis_data  %>% pivot_longer(-Date, values_to = "Confidence", names_to =  "Type")
analysis_data$time <-  decimal_date(analysis_data$Date)
### Model data ####
first_model <-
stan_glm(
formula = Confidence ~ time +  Type ,
data = analysis_data,
family = gaussian(),
prior = normal(location = 0, scale = 1, autoscale = TRUE),
prior_intercept = normal(location = 0, scale = 1, autoscale = TRUE),
prior_aux = exponential(rate = 1, autoscale = TRUE),
seed = 853
)
#### Save model ####
saveRDS(
first_model,
file = "./models/first_model.rds"
)
library(rstanarm)
first_model <-
readRDS(file = here::here("./models/first_model.rds"))
first_model
modelsummary::modelsummary(
list(
"First model" = first_model
),
statistic = "mad",
fmt = 2
)
pp_check(first_model) +
theme_classic() +
theme(legend.position = "bottom")
posterior_vs_prior(first_model) +
theme_minimal() +
scale_color_brewer(palette = "Set1") +
theme(legend.position = "bottom") +
coord_flip()
plot(first_model, "trace")
plot(first_model, "rhat")
#### Preamble ####
# Purpose: Cleans the raw plane data recorded by two observers..... [...UPDATE THIS...]
# Author: Rohan Alexander [...UPDATE THIS...]
# Date: 6 April 2023 [...UPDATE THIS...]
# Contact: rohan.alexander@utoronto.ca [...UPDATE THIS...]
# License: MIT
# Pre-requisites: [...UPDATE THIS...]
# Any other information needed? [...UPDATE THIS...]
#### Workspace setup ####
library(tidyverse)
#### Clean data ####
data <- read_csv("data/01-raw_data/icf_stock_market_confidence_index_table.csv", skip = 1)
colnames(data) <- c("Date",
"Institutional",
"Standard Error",
"Individual",
"Standard Error"
)
data <- data[,c(1,2,4)]
data$Date <- parse_date( paste0("01/",data$Date), format = "%d/%m/%Y")
data$Individual <- as.numeric(data$Individual)
data <- data %>% drop_na()
data <- data %>% filter(Date >= as.Date("2000-01-01"))
#### Save data ####
write.csv(data, file = "./data/02-analysis_data/analysis_data.csv")
getwd()
#### Preamble ####
# Purpose: Cleans the raw plane data recorded by two observers..... [...UPDATE THIS...]
# Author: Rohan Alexander [...UPDATE THIS...]
# Date: 6 April 2023 [...UPDATE THIS...]
# Contact: rohan.alexander@utoronto.ca [...UPDATE THIS...]
# License: MIT
# Pre-requisites: [...UPDATE THIS...]
# Any other information needed? [...UPDATE THIS...]
#### Workspace setup ####
library(tidyverse)
#### Clean data ####
data <- read_csv("data/01-raw_data/icf_stock_market_confidence_index_table.csv", skip = 1)
colnames(data) <- c("Date",
"Institutional",
"Standard Error",
"Individual",
"Standard Error"
)
data <- data[,c(1,2,4)]
data$Date <- parse_date( paste0("01/",data$Date), format = "%d/%m/%Y")
data$Individual <- as.numeric(data$Individual)
data <- data %>% drop_na()
data <- data %>% filter(Date >= as.Date("2000-01-01"))
#### Save data ####
write.csv(data, file = "data/02-analysis_data/analysis_data.csv")
#### Preamble ####
# Purpose: Models... [...UPDATE THIS...]
# Author: Rohan Alexander [...UPDATE THIS...]
# Date: 11 February 2023 [...UPDATE THIS...]
# Contact: rohan.alexander@utoronto.ca [...UPDATE THIS...]
# License: MIT
# Pre-requisites: [...UPDATE THIS...]
# Any other information needed? [...UPDATE THIS...]
#### Workspace setup ####
library(tidyverse)
library(rstanarm)
library(tidyr)
#### Read data ####
analysis_data <- read_csv("data/02-analysis_data/analysis_data.csv")[,-1]
analysis_data <- analysis_data  %>% pivot_longer(-Date, values_to = "Confidence", names_to =  "Type")
analysis_data$time <-  decimal_date(analysis_data$Date)
### Model data ####
first_model <-
stan_glm(
formula = Confidence ~ time +  Type ,
data = analysis_data,
family = gaussian(),
prior = normal(location = 0, scale = 1, autoscale = TRUE),
prior_intercept = normal(location = 0, scale = 1, autoscale = TRUE),
prior_aux = exponential(rate = 1, autoscale = TRUE),
seed = 853
)
#### Save model ####
saveRDS(
first_model,
file = "./models/first_model.rds"
)
head(analysis_data)
analysis_data |>
ggplot(aes(x = Type, y = Confidence, color = Type )) +
geom_boxplot() +
theme_minimal() +
labs(x = "Type of item",
y = "Confidence Index of Stock Market")
modelsummary::datasummary(Confidence ~ Type , data = analysis_data )
modelsummary::datasummary(Confidence ~ Type , labelSubset = analysis_data )
?modelsummary::datasummary
modelsummary::datasummary(Confidence ~ Type , data = analysis_data )
library(modelsummary)
library(modelsummary)
modelsummary::datasummary(Confidence ~ Type , data = analysis_data )
library(modelsummary)
modelsummary::datasummary(Confidence ~ mean+sd+min+max + median , data = analysis_data )
library(modelsummary)
modelsummary::datasummary(Confidence ~ Type*(mean+sd+min+max + median) , data = analysis_data )
seq(as.Date("2024-11-01"),as.Date("2020-01-01"))
seq(as.Date("2024-11-01"),as.Date("2020-01-01") ,by = "1 month")
?seq.Date
-seq(as.Date("2024-11-01"),as.Date("2020-01-01") ,by = "month")
seq(as.Date("2020-01-01") ,as.Date("2024-11-01"),by = "month")
head(analysis_data)
#### Workspace setup ####
library(tidyverse)
set.seed(853)
#### Simulate data ####
# Create a dataset by randomly assigning
analysis_data <- tibble(
Date =  rev( seq(as.Date("2020-01-01") ,as.Date("2024-11-01"),by = "month") ),
Institutional  = rnorm( length(seq(as.Date("2020-01-01") ,as.Date("2024-11-01"),by = "month") ), 76.35, 8.83),#use numbers from summary statistics
Individual = rnorm( length(seq(as.Date("2020-01-01") ,as.Date("2024-11-01"),by = "month") ), 75.24, 6.4)
)
#### Save data ####
write_csv(analysis_data, "data/00-simulated_data/simulated_data.csv")
nrow(analysis_data)
#### Preamble ####
# Purpose: Tests the structure and validity of the simulated Australian
#electoral divisions dataset.
# Author: Rohan Alexander
# Date: 26 September 2024
# Contact: rohan.alexander@utoronto.ca
# License: MIT
# Pre-requisites:
# - The `tidyverse` package must be installed and loaded
# - 00-simulate_data.R must have been run
# Any other information needed? Make sure you are in the `starter_folder` rproj
#### Workspace setup ####
library(tidyverse)
analysis_data <- read_csv("data/00-simulated_data/simulated_data.csv")
# Test if the data was successfully loaded
if (exists("analysis_data")) {
message("Test Passed: The dataset was successfully loaded.")
} else {
stop("Test Failed: The dataset could not be loaded.")
}
#### Test data ####
# Check if the dataset has 59 rows
if (nrow(analysis_data) == 59) {
message("Test Passed: The dataset has 59 rows.")
} else {
stop("Test Failed: The dataset does not have 59 rows.")
}
# Check if the dataset has 3 columns
if (ncol(analysis_data) == 3) {
message("Test Passed: The dataset has 3 columns.")
} else {
stop("Test Failed: The dataset does not have 3 columns.")
}
the_raw_data <- read.csv("https://shiller-data-public.s3.amazonaws.com/icf_stock_market_confidence_index_table.csv")
head(the_raw_data)
write_csv(the_raw_data, "data/01-raw_data/raw_data.csv")
data <- read_csv("data/01-raw_data/raw_data.csv", skip = 1)
head(data)
head(the_raw_data)
write.csv(the_raw_data, "data/01-raw_data/raw_data.csv", row.names = T)
data <- read_csv("data/01-raw_data/raw_data.csv", skip = 1)
head(data)
data <- read_csv("data/01-raw_data/raw_data.csv", skip = 1)
colnames(data) <- c("Date",
"Institutional",
"Standard Error",
"Individual",
"Standard Error"
)
data <- data[,c(1,2,4)]
data$Date <- parse_date( paste0("01/",data$Date), format = "%d/%m/%Y")
data$Individual <- as.numeric(data$Individual)
data <- data %>% drop_na()
data <- data %>% filter(Date >= as.Date("2000-01-01"))
head(data)
write.csv(data, file = "data/02-analysis_data/analysis_data.csv")
#### Workspace setup ####
library(tidyverse)
library(testthat)
data <- read_csv("data/02-analysis_data/analysis_data.csv")
head(data)
dim(data)
analysis_data <- read_csv("data/02-analysis_data/analysis_data.csv")
#### Test data ####
# Test that the dataset has 151 rows - there are 151 divisions in Australia
test_that("dataset has 283 rows", {
expect_equal(nrow(analysis_data), 283)
})
# Test that the dataset has 4 columns
test_that("dataset has 4 columns", {
expect_equal(ncol(analysis_data), 4)
})
class(analysis_data$Date)
# Test that the dataset has 4 columns
test_that("dataset has 4 columns", {
expect_equal(ncol(analysis_data), 4)
})
# Test that the 'Institutional' column is numeric type
test_that("'Institutional' is numeric", {
expect_type(analysis_data$Institutional, "numeric")
})
# Test that the 'Institutional' column is numeric type
test_that("'Institutional' is double", {
expect_type(analysis_data$Institutional, "double")
})
# Test that the 'Date' column is Date type
test_that("'Date' is Date", {
expect_type(analysis_data$Date, "Date")
})
analysis_data$Date
analysis_data <- read_csv("data/02-analysis_data/analysis_data.csv")
#### Test data ####
# Test that the dataset has 151 rows - there are 151 divisions in Australia
test_that("dataset has 283 rows", {
expect_equal(nrow(analysis_data), 283)
})
# Test that the dataset has 4 columns
test_that("dataset has 4 columns", {
expect_equal(ncol(analysis_data), 4)
})
# Test that the 'Institutional' column is numeric type
test_that("'Institutional' is double", {
expect_type(analysis_data$Institutional, "double")
})
# Test that the 'Date' column is Date type
test_that("'Date' is Date", {
expect_type(as.Date(analysis_data$Date), "Date")
})
# Test that the 'Date' column is double type
test_that("'Date' is double", {
expect_type( analysis_data$Date, "double")
})
#### Preamble ####
# Purpose: Tests... [...UPDATE THIS...]
# Author: Rohan Alexander [...UPDATE THIS...]
# Date: 26 September 2024 [...UPDATE THIS...]
# Contact: rohan.alexander@utoronto.ca [...UPDATE THIS...]
# License: MIT
# Pre-requisites: [...UPDATE THIS...]
# Any other information needed? [...UPDATE THIS...]
#### Workspace setup ####
library(tidyverse)
library(testthat)
analysis_data <- read_csv("data/02-analysis_data/analysis_data.csv")
#### Test data ####
# Test that the dataset has 151 rows - there are 151 divisions in Australia
test_that("dataset has 283 rows", {
expect_equal(nrow(analysis_data), 283)
})
# Test that the dataset has 4 columns
test_that("dataset has 4 columns", {
expect_equal(ncol(analysis_data), 4)
})
# Test that the 'Institutional' column is numeric type
test_that("'Institutional' is double", {
expect_type(analysis_data$Institutional, "double")
})
# Test that the 'Date' column is double type
test_that("'Date' is double", {
expect_type( analysis_data$Date, "double")
})
# Test that there are no missing values in the dataset
test_that("no missing values in dataset", {
expect_true(all(!is.na(analysis_data)))
})
#### Preamble ####
# Purpose: Models... [...UPDATE THIS...]
# Author: Rohan Alexander [...UPDATE THIS...]
# Date: 11 February 2023 [...UPDATE THIS...]
# Contact: rohan.alexander@utoronto.ca [...UPDATE THIS...]
# License: MIT
# Pre-requisites: [...UPDATE THIS...]
# Any other information needed? [...UPDATE THIS...]
#### Workspace setup ####
library(tidyverse)
library(tidyr)
#### Read data ####
#line time series
analysis_data <- read_csv("../data/02-analysis_data/analysis_data.csv")[,-1]
#### Preamble ####
# Purpose: Models... [...UPDATE THIS...]
# Author: Rohan Alexander [...UPDATE THIS...]
# Date: 11 February 2023 [...UPDATE THIS...]
# Contact: rohan.alexander@utoronto.ca [...UPDATE THIS...]
# License: MIT
# Pre-requisites: [...UPDATE THIS...]
# Any other information needed? [...UPDATE THIS...]
#### Workspace setup ####
library(tidyverse)
library(tidyr)
#### Read data ####
#line time series
analysis_data <- read_csv("data/02-analysis_data/analysis_data.csv")[,-1]
analysis_data <- analysis_data  %>% pivot_longer(-Date, values_to = "Confidence", names_to =  "Type")
analysis_data$time <-  decimal_date(analysis_data$Date)
analysis_data |>
ggplot(aes(x = Date, y = Confidence, color = Type )) +
geom_point(alpha = 0.8, size = 3) +
geom_line() +
theme_minimal() +
labs(x = "Date",
y = "Confidence Index of Stock Market")
#boxplot
analysis_data |>
ggplot(aes(x = Type, y = Confidence, color = Type )) +
geom_boxplot() +
theme_minimal() +
labs(x = "Type of item",
y = "Confidence Index of Stock Market")
#show summary table
library(modelsummary)
modelsummary::datasummary(Confidence ~ Type*(mean+sd+min+max + median) , data = analysis_data )
modelsummary::modelsummary(
list(
"First model" = first_model
),
statistic = "mad",
fmt = 2
)
first_model
head(data)
modelsummary::datasummary(Confidence ~ Type*(mean+sd+min+max + median) , data = analysis_data )
library(pysch)
library(psych)
?describe
describe(analysis_data[,2:3]m by = "Type")
describe(analysis_data[,2:3], by = "Type")
psych:: describe(analysis_data[,2:3], by = "Type")
describeBy( analysis_data[,2:3], "Type")
describeBy( analysis_data[,2], "Type")
describeBy( analysis_data[,3], "Type")
head(analysis_data)
describeBy( analysis_data[,2:3], "Type")
describeBy( analysis_data[,3],analysis_data$Type)
describeBy( analysis_data[,2:3], "Type")
modelsummary::modelsummary(
list(
"First model" = first_model
),
statistic = "mad",
fmt = 2
)
first_model
cite("tidyr")
citation("tidyr")
citation("tidyverse")
